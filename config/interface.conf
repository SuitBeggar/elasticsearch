# For detail structure of this file
# Set: https://www.elastic.co/guide/en/logstash/current/configuration-file-structure.html
input {  
  #aoplog
  file{
	path => ["/home/weblogic/app/9012/logs/echo-server/cloud/interf*.log","/home/weblogic/app/9013/logs/echo-server/cloud/interf*.log","/home/weblogic/app/9014/logs/echo-server/cloud/interf*.log"]
	type => "interface20"
	start_position => "beginning"
	codec => plain{
      charset => "UTF-8"
    }
	ignore_older => 0
  }
}
filter {
	if[type] == "interface20"{
           multiline {
       	  	 pattern => "^\["
           	negate => true
           	what => "previous"
          } 	
	  ruby{
		init => "@kname = ['time','thread','level','uuid','interfacename','request','usetime']"
		code => "event.append(Hash[@kname.zip(event['message'].split('] ['))])"
	  }
	  if[time]{
		ruby{
			init => "@kname = ['kafkatime','logtime']"
			code => "event.append(Hash[@kname.zip(event['time'].split('['))])"
		}
	  }
      if[usetime]{
        ruby {
            code => "
                    lasttime = /.*?(\d+).*/.match(event['usetime'])
                    event.append(Hash['lasttime' => lasttime[1]])
                 "
        }
      }	  
	  mutate {        
		  remove_field => ["kafkatime"] 
		  remove_field => ["time"]  
          remove_field => ["usetime"]
	  }
      mutate {
        convert => {"lasttime" => "float"}
      }
	  date {
		match => [ "logtime", "YYYY-MM-dd HH:mm:ss,SSS" ]
	  }
	}
}   
output {
  # For detail config for elasticsearch as output, 
  # See: https://www.elastic.co/guide/en/logstash/current/plugins-outputs-elasticsearch.html
  # if[type] == "interface"{
  #  stdout { codec => rubydebug }
  # }
  
  if[type] == "interface20"{
    elasticsearch {
      action => "index"            #The operation on ES
      hosts  => "10.252.6.22:9013"     #ElasticSearch host, can be array.
      index  => "logstash-interfacelog-20"         #The index to write data to, can be any string.
      timeout => 5000
      codec => plain{
          charset => "UTF-8"
       }
    }
 }
}
